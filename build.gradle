plugins {
	id 'org.springframework.boot' version '2.6.6'
	id 'io.spring.dependency-management' version '1.0.11.RELEASE'
}
//sourceCompatibility = '11'

allprojects {

	group = 'org.jd.demo'
	version = '1.0.1-SNAPSHOT'

}

subprojects {

	apply plugin: 'idea'
	apply plugin: 'java-library'

	repositories {
		mavenLocal()
		mavenCentral()
	}

	if (!isParentProject(project.name)) {
		dependencies {
			compileOnly 'org.projectlombok:lombok:1.18.18'
			annotationProcessor 'org.projectlombok:lombok:1.18.18'
		}
	}
	if (isSpringBootProject(project.name)) {
		apply plugin: 'org.springframework.boot'
		apply plugin: 'io.spring.dependency-management'

		dependencyManagement {
			imports {
//				mavenBom 'org.springframework.boot:spring-boot-dependencies:2.6.6'
				mavenBom "com.alibaba.cloud:spring-cloud-alibaba-dependencies:2021.0.1.0"
			}

			dependencies {
				dependency 'org.apache.dubbo:dubbo-spring-boot-starter:3.0.7'
				dependency 'org.apache.dubbo:dubbo-registry-nacos:3.0.7'
				dependency 'com.alibaba.fastjson2:fastjson2:2.0.16'
			}
		}

		dependencies {
			implementation 'org.springframework.boot:spring-boot-starter'
			implementation 'org.springframework.boot:spring-boot-starter-web'

			testImplementation 'org.springframework.boot:spring-boot-starter-test'
		}

		test {
			useJUnitPlatform()
		}
	}
}


/**
 * 判断项目是否使用SpringBoot相关依赖
 * @param projectName
 * @return
 */
def isSpringBootProject(String projectName) {
	switch (projectName) {
		case 'guice-demo': return false
		default: return true
	}
}

def isParentProject(String projectName) {
	switch (projectName) {
		case 'dubbo-demo': return true
		case 'kotlin-demo': return true
		case 'springcloud-demo': return true
		default: return false
	}
}